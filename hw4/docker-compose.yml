version: "3.9"

services:
  alpine:
    image: alpine
    container_name: alpine
    networks:
      - hw4
    command: >
      sh -c "
        apk add --no-cache openssh python3 py3-pip py3-virtualenv &&
        echo 'root:root' | chpasswd &&
        ssh-keygen -A &&
        echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config &&
        echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config &&
        /usr/sbin/sshd -D
      "

  jenkins:
    image: jenkins
    container_name: jenkins
    user: root
    networks:
      - hw4
    ports:
      - 8080:8080
      - 50000:50000
    volumes:
      - ./jenkins_data:/var/jenkins_home
      - ./ansible:/var/lib/ansible
    command: >
      sh -c "
        apt-get update && 
        apt-get install -y python3 python3-pip sshpass && 
        /usr/local/bin/jenkins.sh
      "

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    networks:
      - hw4
    depends_on:
      db:
        condition: service_healthy
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - ./sonarqube/sonarqube_data:/opt/sonarqube/data
      - ./sonarqube/sonarqube_extensions:/opt/sonarqube/extensions
      - ./sonarqube/sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"

  db:
    image: postgres:12
    container_name: postgres
    networks:
      - hw4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - ./sonarqube/postgresql:/var/lib/postgresql
      - ./sonarqube/postgresql_data:/var/lib/postgresql/data

networks:
  hw4:
    driver: bridge
      